/* Licensed under The MIT License (MIT), see license.txt*/
package com.tanjent.tanjentxm;

import java.util.ArrayList;
import java.util.Random;

/** <p>
 * Holds a channel state of an {@link XMModule}.
 * </p>
 * @author Jonas Murman */
public class XMChannel {
    public boolean playing;
    public int noteDelay;

    public XMNote note;
    public int amigaPeriod;

    public int arpeggioTick;

    public int portamentoUpDown;
    public int finePortamentoUp;
    public int finePortamentoDown;
    public int extraFinePortamentoUp;
    public int extraFinePortamentoDown;

    public int tonePortamento;
    public int tonePortamentoDestinationAmigaPeriod;

    public int vibrato;
    public int vibratoDepth;
    public int vibratoPhase;
    public int vibratoWaveform;
    public float vibratoAmigaPeriodAdd;
    public static int VIBRATO_WAVEFORM_SIZE = (1 << 10);
    public static int VIBRATO_WAVEFORM_SIZE_MASK = (XMChannel.VIBRATO_WAVEFORM_SIZE - 1);

    public float[] VIBRATO_WAVEFORM_SINE;
    public float[] VIBRATO_WAVEFORM_SAW;
    public float[] VIBRATO_WAVEFORM_SQUARE;
    public float[] VIBRATO_WAVEFORM_RANDOM;
    public ArrayList<float[]> VIBRATO_WAVEFORMS;

    public boolean autoVibratoEnabled;
    public int autoVibratoTicks;
    public int autoVibratoPhase;
    public float autoVibratoAmigaPeriodAdd;
    public static int AUTOVIBRATO_WAVEFORM_SIZE = (1 << 8);
    public static int AUTOVIBRATO_WAVEFORM_SIZE_MASK = (XMChannel.AUTOVIBRATO_WAVEFORM_SIZE - 1);
    public float[] AUTOVIBRATO_WAVEFORM_SINE;
    public float[] AUTOVIBRATO_WAVEFORM_SQUARE;
    public float[] AUTOVIBRATO_WAVEFORM_RAMPUP;
    public float[] AUTOVIBRATO_WAVEFORM_RAMPDOWN;
    public float[] AUTOVIBRATO_WAVEFORM_RANDOM;
    public ArrayList<float[]> AUTOVIBRATO_WAVEFORMS;

    // generated by round(-64*sin(i/256*2*pi)) (i = 0 ... 255)
    public static int[] AUTOVIBRATO_SINE_TABLE = new int[] {
            0,  -2,  -3,  -5,  -6,  -8,  -9, -11, -12, -14, -16, -17, -19, -20, -22, -23,
            -24, -26, -27, -29, -30, -32, -33, -34, -36, -37, -38, -39, -41, -42, -43, -44,
            -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -56, -57, -58, -59,
            -59, -60, -60, -61, -61, -62, -62, -62, -63, -63, -63, -64, -64, -64, -64, -64,
            -64, -64, -64, -64, -64, -64, -63, -63, -63, -62, -62, -62, -61, -61, -60, -60,
            -59, -59, -58, -57, -56, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46,
            -45, -44, -43, -42, -41, -39, -38, -37, -36, -34, -33, -32, -30, -29, -27, -26,
            -24, -23, -22, -20, -19, -17, -16, -14, -12, -11,  -9,  -8,  -6,  -5,  -3,  -2,
            0,   2,   3,   5,   6,   8,   9,  11,  12,  14,  16,  17,  19,  20,  22,  23,
            24, 26,  27,  29,  30,  32,  33,  34,  36,  37,  38,  39,  41,  42,  43,  44,
            45, 46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  56,  57,  58,  59,
            59, 60,  60,  61,  61,  62,  62,  62,  63,  63,  63,  64,  64,  64,  64,  64,
            64, 64,  64,  64,  64,  64,  63,  63,  63,  62,  62,	62,  61,  61,  60,  60,
            59, 59,  58,  57,  56,  56,  55,  54,  53,  52,  51,  50,  49,  48,  47,  46,
            45, 44,  43,  42,  41,  39,  38,  37,  36,  34,  33,  32,  30,  29,  27,	26,
            24, 23,  22,  20,  19,  17,  16,  14,  12,  11,   9,   8,   6,   5,   3,   2};

    public int instrumentColumnMemory;

    public XMSample sample;
    public float samplePosition;
    public float samplePositionAddTickStart;
    public float samplePositionAddTickEnd;
    public int sampleOffsetMemory;

    public static float MAX_VOLUME = 64.0f;
    public int defaultVolumeMemory;
    public int volumeSlideMemory;
    public int volumeSlideTickDeltaFP;
    public int volumeSlideUpFineMemory;
    public int volumeSlideDownFineMemory;
    public int volumeSlideFineTickDeltaFP;
    public int volumeFP;
    public int volumeFP_LPF;

    public float volumeFactorTickStart;
    public float volumeFactorTickEnd;

    public boolean volumeEnvelopeDone;
    public int volumeEnvelopeTick;
    public int volumeEnvelopePoint;
    public float volumeEnvelopeValue;
    public float volumeEnvelopeValueTickAdd;

    public boolean inRelease;

    public int fadeOut;

    public int multiRetrigVolumeSlideMemory;

    public int tremolo;
    public float tremoloDepth;
    public int tremoloPhase;
    public int tremoloWaveform;
    public static int TREMOLO_WAVEFORM_SIZE = 0x400;
    public static int TREMOLO_WAVEFORM_SIZE_MASK = (TREMOLO_WAVEFORM_SIZE - 1);
    public float[] TREMOLO_WAVEFORM_SINE;
    public float[] TREMOLO_WAVEFORM_SAW;
    public float[] TREMOLO_WAVEFORM_SQUARE;
    public float[] TREMOLO_WAVEFORM_RANDOM;
    public ArrayList<float[]> TREMOLO_WAVEFORMS;

    public static int TREMOR_STATE_ON = 0;
    public static int TREMOR_STATE_OFF = 1;
    public int tremorMemory;
    public int tremorState;
    public int tremorCountOn;
    public int tremorCountOff;
    public int tremorOnTicks;
    public int tremorOffTicks;

    public int panningLeftFP;
    public int panningRightFP;
    public int panningSlideMemory;
    public int panningSlideTickDeltaFP;

    public boolean panningEnvelopeDone;
    public int panningEnvelopeTick;
    public int panningEnvelopePoint;
    public float panningEnvelopeValue;
    public float panningEnvelopeValueTickAdd;
    public float panningEnvelopeLeftValueTickStart;
    public float panningEnvelopeRightValueTickStart;
    public float panningEnvelopeLeftValueTickEnd;
    public float panningEnvelopeRightValueTickEnd;

    /**
     * Creates a new channel and initializes vibrato, autovibrato and tremolo tables.
     */
    public XMChannel()
    {
        Random mathRandom = new Random();

        this.VIBRATO_WAVEFORM_SINE = new float[XMChannel.VIBRATO_WAVEFORM_SIZE];
        this.VIBRATO_WAVEFORM_SAW = new float[XMChannel.VIBRATO_WAVEFORM_SIZE];
        this.VIBRATO_WAVEFORM_SQUARE = new float[XMChannel.VIBRATO_WAVEFORM_SIZE];
        this.VIBRATO_WAVEFORM_RANDOM = new float[XMChannel.VIBRATO_WAVEFORM_SIZE];
        for (int i=0;i<XMChannel.VIBRATO_WAVEFORM_SIZE;i++) {
            if (i < (XMChannel.VIBRATO_WAVEFORM_SIZE >> 1)) {
                this.VIBRATO_WAVEFORM_SAW[i] = i / (float)(XMChannel.VIBRATO_WAVEFORM_SIZE >> 1);
                this.VIBRATO_WAVEFORM_SQUARE[i] = 1.0f;
            } else {
                this.VIBRATO_WAVEFORM_SAW[i] = -1 + (i - (XMChannel.VIBRATO_WAVEFORM_SIZE >> 1)) / (float)(XMChannel.VIBRATO_WAVEFORM_SIZE >> 1);
                this.VIBRATO_WAVEFORM_SQUARE[i] = -1.0f;
            }
            this.VIBRATO_WAVEFORM_SINE[i] = (float)Math.sin(i / (double)XMChannel.VIBRATO_WAVEFORM_SIZE * Math.PI * 2);
            this.VIBRATO_WAVEFORM_RANDOM[i] = (mathRandom.nextFloat() - 0.5f) * 2.0f;
        }
        this.VIBRATO_WAVEFORMS = new ArrayList<float[]>();
        this.VIBRATO_WAVEFORMS.add(this.VIBRATO_WAVEFORM_SINE);
        this.VIBRATO_WAVEFORMS.add(this.VIBRATO_WAVEFORM_SAW);
        this.VIBRATO_WAVEFORMS.add(this.VIBRATO_WAVEFORM_SQUARE);
        this.VIBRATO_WAVEFORMS.add(this.VIBRATO_WAVEFORM_RANDOM);
        this.VIBRATO_WAVEFORMS.add(this.VIBRATO_WAVEFORM_SINE);
        this.VIBRATO_WAVEFORMS.add(this.VIBRATO_WAVEFORM_SAW);
        this.VIBRATO_WAVEFORMS.add(this.VIBRATO_WAVEFORM_SQUARE);
        this.VIBRATO_WAVEFORMS.add(this.VIBRATO_WAVEFORM_RANDOM);

        this.AUTOVIBRATO_WAVEFORM_SINE = new float[XMChannel.AUTOVIBRATO_WAVEFORM_SIZE];
        this.AUTOVIBRATO_WAVEFORM_SQUARE = new float[XMChannel.AUTOVIBRATO_WAVEFORM_SIZE];
        this.AUTOVIBRATO_WAVEFORM_RAMPUP = new float[XMChannel.AUTOVIBRATO_WAVEFORM_SIZE];
        this.AUTOVIBRATO_WAVEFORM_RAMPDOWN = new float[XMChannel.AUTOVIBRATO_WAVEFORM_SIZE];
        this.AUTOVIBRATO_WAVEFORM_RANDOM = new float[XMChannel.AUTOVIBRATO_WAVEFORM_SIZE];
        for (int i=0;i<XMChannel.AUTOVIBRATO_WAVEFORM_SIZE;i++) {
            if (i < (XMChannel.AUTOVIBRATO_WAVEFORM_SIZE >> 1)) {
                this.AUTOVIBRATO_WAVEFORM_SQUARE[i] = (-1.0f);
                this.AUTOVIBRATO_WAVEFORM_RAMPUP[i] = 1.0f * (i / (float)(XMChannel.AUTOVIBRATO_WAVEFORM_SIZE >> 1));
            } else {
                this.AUTOVIBRATO_WAVEFORM_SQUARE[i] = (1.0f);
                this.AUTOVIBRATO_WAVEFORM_RAMPUP[i] = 1.0f * (-1 + (i - (XMChannel.AUTOVIBRATO_WAVEFORM_SIZE >> 1)) / (float)(XMChannel.AUTOVIBRATO_WAVEFORM_SIZE >> 1));
            }
            this.AUTOVIBRATO_WAVEFORM_RAMPDOWN[i] = (-this.AUTOVIBRATO_WAVEFORM_RAMPUP[i]);
            this.AUTOVIBRATO_WAVEFORM_SINE[i] = XMChannel.AUTOVIBRATO_SINE_TABLE[i] / 64.0f;
            this.AUTOVIBRATO_WAVEFORM_RANDOM[i] = 1.0f * ((mathRandom.nextFloat() - 0.5f) * 2.0f);
        }
        this.AUTOVIBRATO_WAVEFORMS = new ArrayList<float[]>();
        this.AUTOVIBRATO_WAVEFORMS.add(this.AUTOVIBRATO_WAVEFORM_SINE);
        this.AUTOVIBRATO_WAVEFORMS.add(this.AUTOVIBRATO_WAVEFORM_SQUARE);
        this.AUTOVIBRATO_WAVEFORMS.add(this.AUTOVIBRATO_WAVEFORM_RAMPUP);
        this.AUTOVIBRATO_WAVEFORMS.add(this.AUTOVIBRATO_WAVEFORM_RAMPDOWN);
        this.AUTOVIBRATO_WAVEFORMS.add(this.AUTOVIBRATO_WAVEFORM_RANDOM);

        this.TREMOLO_WAVEFORM_SINE = new float[XMChannel.TREMOLO_WAVEFORM_SIZE];
        this.TREMOLO_WAVEFORM_SAW = new float[XMChannel.TREMOLO_WAVEFORM_SIZE];
        this.TREMOLO_WAVEFORM_SQUARE = new float[XMChannel.TREMOLO_WAVEFORM_SIZE];
        this.TREMOLO_WAVEFORM_RANDOM = new float[XMChannel.TREMOLO_WAVEFORM_SIZE];
        for (int i=0;i<XMChannel.TREMOLO_WAVEFORM_SIZE;i++) {
            if (i < (XMChannel.TREMOLO_WAVEFORM_SIZE >> 1)) {
                this.TREMOLO_WAVEFORM_SINE[i] = (0);
                this.TREMOLO_WAVEFORM_SAW[i] = (1.0f - ((XMChannel.TREMOLO_WAVEFORM_SIZE >> 1) - i) / (float)(XMChannel.TREMOLO_WAVEFORM_SIZE >> 1));
                this.TREMOLO_WAVEFORM_SQUARE[i] = (0);
            } else {
                this.TREMOLO_WAVEFORM_SINE[i] = (float)(-Math.sin(i / (double)XMChannel.TREMOLO_WAVEFORM_SIZE * Math.PI * 2.0));
                this.TREMOLO_WAVEFORM_SAW[i] = (0);
                this.TREMOLO_WAVEFORM_SQUARE[i] = (1);
            }
            this.TREMOLO_WAVEFORM_RANDOM[i] = mathRandom.nextFloat();
        }
        this.TREMOLO_WAVEFORMS = new ArrayList<float[]>();
        this.TREMOLO_WAVEFORMS.add(this.TREMOLO_WAVEFORM_SINE);
        this.TREMOLO_WAVEFORMS.add(this.TREMOLO_WAVEFORM_SAW);
        this.TREMOLO_WAVEFORMS.add(this.TREMOLO_WAVEFORM_SQUARE);
        this.TREMOLO_WAVEFORMS.add(this.TREMOLO_WAVEFORM_RANDOM);
        this.TREMOLO_WAVEFORMS.add(this.TREMOLO_WAVEFORM_SINE);
        this.TREMOLO_WAVEFORMS.add(this.TREMOLO_WAVEFORM_SAW);
        this.TREMOLO_WAVEFORMS.add(this.TREMOLO_WAVEFORM_SQUARE);
        this.TREMOLO_WAVEFORMS.add(this.TREMOLO_WAVEFORM_RANDOM);

        this.reset();
    }

    /**
     * Stops the channel from playing and resets all effect memories.
     */
    public void reset()
    {
        this.playing = false;
        this.noteDelay = 0;

        this.note = new XMNote();
        this.amigaPeriod = 0;

        this.arpeggioTick = 0;

        this.portamentoUpDown = 0;
        this.finePortamentoUp = 0;
        this.finePortamentoDown = 0;
        this.extraFinePortamentoUp = 0;
        this.extraFinePortamentoDown = 0;

        this.tonePortamento = 0;
        this.tonePortamentoDestinationAmigaPeriod = 0;

        this.vibrato = 0;
        this.vibratoDepth = 0;
        this.vibratoPhase = 0;
        this.vibratoWaveform = 0;
        this.vibratoAmigaPeriodAdd = 0;

        this.autoVibratoEnabled = false;
        this.autoVibratoTicks = 0;
        this.autoVibratoPhase = 0;
        this.autoVibratoAmigaPeriodAdd = 0;

        this.instrumentColumnMemory = 0;

        this.sample = new XMSample();
        this.samplePosition = 0;
        this.samplePositionAddTickStart = 0;
        this.samplePositionAddTickEnd = 0;
        this.sampleOffsetMemory = 0;

        this.defaultVolumeMemory = 0;
        this.volumeSlideMemory = 0;
        this.volumeSlideTickDeltaFP = 0;
        this.volumeSlideUpFineMemory = 0;
        this.volumeSlideDownFineMemory = 0;
        this.volumeSlideFineTickDeltaFP = 0;
        this.volumeFP = 0;
        this.volumeFP_LPF = 0;

        this.volumeFactorTickStart = 0.0f;
        this.volumeFactorTickEnd = 0.0f;

        this.volumeEnvelopeDone = true;
        this.volumeEnvelopeTick = 0;
        this.volumeEnvelopePoint = 0;
        this.volumeEnvelopeValue = 0;
        this.volumeEnvelopeValueTickAdd = 0;

        this.inRelease = false;
        this.fadeOut = XMInstrument.FADEOUT_MAX;

        this.multiRetrigVolumeSlideMemory = 0x08;

        this.tremolo = 0;
        this.tremoloDepth = 0;
        this.tremoloPhase = 0;
        this.tremoloWaveform = 0;

        this.tremorMemory = 0;
        this.tremorState = XMChannel.TREMOR_STATE_OFF;
        this.tremorCountOn = 0;
        this.tremorCountOff = 0;
        this.tremorOnTicks = 0;
        this.tremorOffTicks = 0;

        this.panningLeftFP = FixedPoint.FP_HALF;
        this.panningRightFP = FixedPoint.FP_HALF;
        this.panningSlideMemory = 0;
        this.panningSlideTickDeltaFP = 0;

        this.panningEnvelopeDone = false;
        this.panningEnvelopeTick = 0;
        this.panningEnvelopePoint = 0;
        this.panningEnvelopeValue = 0.0f;
        this.panningEnvelopeValueTickAdd = 0.0f;
        this.panningEnvelopeLeftValueTickStart = 0.0f;
        this.panningEnvelopeRightValueTickStart = 0.0f;
        this.panningEnvelopeLeftValueTickEnd = 0.0f;
        this.panningEnvelopeRightValueTickEnd = 0.0f;
    }
}
